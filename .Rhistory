clsample
dim(clsample)
clsample1<-data.matrix(clsample)
clsample1
cldata<-clsample1[,1:2]
cldata
#Elbow Curve
wss<-vector(mode="numeric",length=6)
wss
#wss<-(nrow(clsample1)-1)*sum(apply(clsample1,2,var))
#wss
#for(i in 1:6) {
# wss[i]=sum(kmeans(cldata,centers=i,nstart=25)$withinss)
#}
km=kmeans(cldata,2,nstart=10)
km
km$cluster
km$centers
km$withinss
km$betweenss
km$totss
#Visualizing clusters
plot(cldata[km$cluster ==1,],col="red",xlim=c(min(cldata[,1]),max(cldata[,1])),ylim=c(min(cldata[,2]),max(cldata[,2])))
points(cldata[km$cluster == 2,],col="blue")
#below code is for iris data read from iris.csv file
plot(k1[km$cluster ==1,],col="red",xlim=c(min(k1[,1]),max(k1[,1])),ylim=c(min(k1[,2]),max(k1[,2])))
points(k1[km$cluster == 2,],col="blue")
library(cluster)
library(ggplot2)
#library(plyr)
#library(lattice)
#library(graphics)
x<-c(185,170,168,179,182,188)
y<-c(72,56,60,68,72,77)
#below code is for iris dataset read from iris.csv
k <- read.csv("C:/Program Files (x86)/Windows NT/TableTextService/en-US/dsr lab/iris.csv")
k
k1 <- k[,1:2]
k1
clsample<-data.frame(x,y)
clsample
dim(clsample)
clsample1<-data.matrix(clsample)
clsample1
cldata<-clsample1[,1:2]
cldata
#Elbow Curve
wss<-vector(mode="numeric",length=6)
wss
#wss<-(nrow(clsample1)-1)*sum(apply(clsample1,2,var))
#wss
#for(i in 1:6) {
# wss[i]=sum(kmeans(cldata,centers=i,nstart=25)$withinss)
#}
km=kmeans(cldata,2,nstart=10)
km
km$cluster
km$centers
km$withinss
km$betweenss
km$totss
#Visualizing clusters
plot(cldata[km$cluster ==1,],col="red",xlim=c(min(cldata[,1]),max(cldata[,1])),ylim=c(min(cldata[,2]),max(cldata[,2])))
points(cldata[km$cluster == 2,],col="blue")
#below code is for iris data read from iris.csv file
plot(k1[km$cluster ==1,],col="red",xlim=c(min(k1[,1]),max(k1[,1])),ylim=c(min(k1[,2]),max(k1[,2])))
points(k1[km$cluster == 2,],col="blue")
path="D:/7th SEM/DSR Lab"
setwd(path)
dataval=read.csv("Mispriced-Diamonds.csv")
plot(dataval$carat,dataval$price)
path="E:/dsr lab"
setwd(path)
dataval=read.csv("iris.csv")
dataval
#sepal.length
#sepal.width
plot(dataval$sepal.length,dataval$sepal.width)
path="E:/dsr lab"
setwd(path)
bankdata=read.delim("DT.csv")
bankdata
val_new=vector(mode="numeric",length =length(bankdata$Wind))
bankdata$num<- seq.int(nrow(bankdata))
write.table(bankdata,file="file.csv", sep= "\t", row.names=FALSE)
clear
clear
path="E:/dsr lab"
setwd(path)
bankdata=read.delim("DT.csv")
bankdata
val_new=vector(mode="numeric",length =length(bankdata$Wind))
bankdata$num<- seq.int(nrow(bankdata))
write.table(bankdata,file="file.csv", sep= "\t", row.names=FALSE)
BuffTail<-c(10,1,37,5,12)
Gardenbee<-c(8,3,9,6,4)
RedTail<-c(18,9,12,4,6)
Carderbee<-c(8,277,6,32,23)
HoneyBee<-c(12,13,16,9,10)
beeframe<-data.frame(BuffTail,Gardenbee,RedTail,Carderbee,HoneyBee)
beeframe
names<-c("Thistle","Vipers","GoldenRain","Yellowalfala","blackberry")
rownames(beeframe)<-names
beeframe
matrixbee=matrix(data=c(10,1,37,5,12,8,3,9,6,4,18,9,12,4,6,8,27,6,32,23,12,13,16,9,10),nrow=5,ncol=5)
matrixbee
plantnames=list("Thistle","Vipers","GoldenRain","Yellowalfala","blackberry")
plantframe=as.data.frame(plantnames)
str(plantframe)
plantmatrix=as.matrix(plantframe)
str(plantmatrix)
rownames(matrixbee)=plantmatrix
matrixbee
class(matrixbee)
intnum=c(10,20,30)
strv=c("Water","lemon","juice")
numnum=c(23.3,44.5,89.0)
list1=list(intnum,strv,numnum)
names(list1)=c("integer number","string","numeric number")
list1
library(ggplot2)
library(gcookbook)
cabbage_exp
ggplot(cabbage_exp,aes(x=Date,y=Weight,fill=Cultivar))+geom_bar(stat="identity",position = "dodge")+ geom_text(aes(label=Weight),vjust=1.5,colour="white",position = position_dodge(.9),size=3)
library(ggplot2)
library(gcookbook)
cabbage_exp
boxplot(Weight~Date,data=cabbage_exp,range=0,ylab="Weight ofCabbage",xlab="Dates of Cabbage")
library(cluster)
library(ggplot2)
x<-c(185,170,168,179,182,188)
y<-c(72,56,60,68,72,77)
getwd()
data1<-read.csv("iris.csv")
data1
clsample<-data.frame(x,y)
clsample
dim(clsample)
clsample1<-data.matrix(clsample)
clsample1
cldata<-clsample1[,1:2]
cldata
wss<-vector(mode="numeric",length=6)
wss
km=kmeans(cldata,2,nstart=10)
km
km$cluster
km$centers
km$withinss
km$betweenss
km$totss
plot(cldata[km$cluster ==1,],col="red",xlim=c(min(cldata[,1]),max(cldata[,1])),ylim=c(min(cldata[,2]),max(cldata[,2])))
points(cldata[km$cluster == 2,],col="blue")
library(gcookbook)
df <- heightweight
plot(df$ageYear, df$heightIn, xlab="AgeYear", ylab="Height")
cars <- mtcars
dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7, main="Gas Mileage for Car Models", xlab="MPG")
library(visualize)
library(BSDA)
rural<-c(3.1,2.9,2.8,3.0,2.7,3.1,2.6,2.8,2.9,3.0)
urban<-c(3.5,3.0,3.1,3.2,2.9,3.4,3.0,3.4,2.8,3.4)
xrbar=mean(rural)
xrbar
xurbar=mean(urban)
xurbar
var(rural)
sd(rural)
var(urban)
sd(urban)
#Obtaining t-calculated value
t.test(x=rural,y=urban,var.equal = TRUE,conf.level = 0.95)
#t.test(x=xrbar,y=xurbar,var.equal = TRUE)
#Obtain t value for two sided test at 0.05 significance levels
#From t distribution table or t-significant,t-critical
qt(p=0.05/2,df=18,lower.tail = FALSE)
visualize.t(stat=c(-2.9886,2.9886),df=18,section="tails")
visualize.t(stat=c(-2.100922,2.100922),df=18,section="tails")
library(cluster)
library(ggplot2)
#library(plyr)
#library(lattice)
#library(graphics)
x<-c(185,170,168,179,182,188)
y<-c(72,56,60,68,72,77)
#below code is for iris dataset read from iris.csv
k <- read.csv("iris.csv")
k
k1 <- k[,1:2]
k1
clsample<-data.frame(x,y)
clsample
dim(clsample)
clsample1<-data.matrix(clsample)
clsample1
cldata<-clsample1[,1:2]
cldata
#Elbow Curve
wss<-vector(mode="numeric",length=6)
wss
#wss<-(nrow(clsample1)-1)*sum(apply(clsample1,2,var))
#wss
#for(i in 1:6) {
# wss[i]=sum(kmeans(cldata,centers=i,nstart=25)$withinss)
#}
km=kmeans(cldata,2,nstart=10)
km
km$cluster
km$centers
km$withinss
km$betweenss
km$totss
#Visualizing clusters
plot(cldata[km$cluster ==1,],col="red",xlim=c(min(cldata[,1]),max(cldata[,1])),ylim=c(min(cldata[,2]),max(cldata[,2])))
points(cldata[km$cluster == 2,],col="blue")
#below code is for iris data read from iris.csv file
plot(k1[km$cluster ==1,],col="red",xlim=c(min(k1[,1]),max(k1[,1])),ylim=c(min(k1[,2]),max(k1[,2])))
points(k1[km$cluster == 2,],col="blue")
data(iris)
head(iris)
fit1 <- lm(Sepal.Length ~ Petal.Width, data = iris) #linear regression lm function
summary(fit1)
library(ggplot2)
ggplot(iris, aes(x = Petal.Width, y = Sepal.Length)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
#Naive Bayes Classification Manually
df<-read.csv("nb_data.csv")
#Probability of each class
probClass<-table(df$Enrolls)
probClass<-probClass/sum(probClass)
probClass
#Probabilities of Attribute Age
ageClass<-table(df$Enrolls,df$Age)
ageClass<-ageClass/rowSums(ageClass)
ageClass
#Probabilities of Attribute Income
incomeClass<-table(df$Enrolls,df$Income)
incomeClass<-incomeClass/rowSums(incomeClass)
incomeClass
#Probabilities of Attribute JobSatis
jobClass<-table(df$Enrolls,df$JobSatis)
jobClass<-jobClass/rowSums(jobClass)
jobClass
#Probabilities of Attribute Desire
desireClass<-table(df$Enrolls,df$Desire)
desireClass<-desireClass/rowSums(desireClass)
desireClass
Age<-"<=30"
Income<-"Medium"
JobSatis<-"Yes"
Desire<-"Fair"
test<-data.frame(Age,Income,JobSatis,Desire)
#Compute probabilities of Yes and No classes for test data
prob_yes=probClass["Yes"]*(ageClass["Yes",Age]*incomeClass["Yes",Income]*jobClass["Yes",JobSatis]*desireClass["Yes",Desire])
prob_no=probClass["No"]*(ageClass["No",Age]*incomeClass["No",Income]*jobClass["No",JobSatis]*desireClass["No",Desire])
prob_yes
prob_no
#Naive Bayes Classifer Function
library(e1071)
nb<-naiveBayes(Enrolls~ Age+ Income + JobSatis + Desire, data=df)
nb
predict(nb,test)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
# Data
data <- read.csv(file.choose(), header = T)
str(data)
xtabs(~admit+rank, data = data)
data$rank <- as.factor(data$rank)
data$admit <- as.factor(data$admit)
# Visualization
pairs.panels(data[-1])
data %>%
ggplot(aes(x=admit, y=gpa, fill = admit)) +
geom_boxplot() +
ggtitle("Box Plot")
data %>% ggplot(aes(x=gpa, fill = admit)) +
geom_density(alpha=0.8, color= 'black') +
ggtitle("Density Plot")
# Data Partition
set.seed(1234)
ind <- sample(2, nrow(data), replace = T, prob = c(0.8, 0.2))
train <- data[ind == 1,]
test <- data[ind == 2,]
# Naive Bayes Model
model <- naive_bayes(admit ~ ., data = train, usekernel = T)
model
train %>%
filter(admit == "1") %>%
summarise(mean(gre), sd(gre))
plot(model)
# Predict
p <- predict(model, train, type = 'prob')
head(cbind(p, train))
# Confusion Matrix - train data
p1 <- predict(model, train)
(tab1 <- table(p1, train$admit))
1 - sum(diag(tab1)) / sum(tab1)
# Confusion Matrix - test data
p2 <- predict(model, test)
(tab2 <- table(p2, test$admit))
1 - sum(diag(tab2)) / sum(tab2)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
# Data
data <- read.csv(file.choose(), header = T)
str(data)
xtabs(~admit+rank, data = data)
data$rank <- as.factor(data$rank)
data$admit <- as.factor(data$admit)
# Visualization
pairs.panels(data[-1])
data %>%
ggplot(aes(x=admit, y=gpa, fill = admit)) +
geom_boxplot() +
ggtitle("Box Plot")
data %>% ggplot(aes(x=gpa, fill = admit)) +
geom_density(alpha=0.8, color= 'black') +
ggtitle("Density Plot")
# Data Partition
set.seed(1234)
ind <- sample(2, nrow(data), replace = T, prob = c(0.8, 0.2))
train <- data[ind == 1,]
test <- data[ind == 2,]
# Naive Bayes Model
model <- naive_bayes(admit ~ ., data = train, usekernel = T)
model
train %>%
filter(admit == "1") %>%
summarise(mean(gre), sd(gre))
plot(model)
# Predict
p <- predict(model, train, type = 'prob')
head(cbind(p, train))
# Confusion Matrix - train data
p1 <- predict(model, train)
(tab1 <- table(p1, train$admit))
1 - sum(diag(tab1)) / sum(tab1)
# Confusion Matrix - test data
p2 <- predict(model, test)
(tab2 <- table(p2, test$admit))
1 - sum(diag(tab2)) / sum(tab2)
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
#play<-c('yes','no','yes','no','yes','yes','yes','yes','yes','no')
#outlook<-c('rainy','rainy','overcast','sunny','rainy','sunny','rainy','sunny','overcast','sunny')
#Temperature<-c('cool','cool','hot','mild','cool','cool','cool','hot','mild','mild')
#Humidity<-c('normal','normal','high','high','normal','normal','normal','normal','high','high')
#Wind<-c('FALSE','TRUE','FALSE','FALSE','FALSE','FALSE','FALSE','FALSE','TRUE','TRUE')
#play_decision<-cbind(play,outlook,Temperature,Humidity,Wind)
#play_decision
#play_decision=as.data.frame(play_decision)
#play_decision
#summary(play_decision)
p <- read.csv("C:/Users/jyothiramesh/Desktop/dsr/8836201-6f9306ad21398ea43cba4f7d537619d0e07d5ae3/DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
?rpart.plot
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
#play<-c('yes','no','yes','no','yes','yes','yes','yes','yes','no')
#outlook<-c('rainy','rainy','overcast','sunny','rainy','sunny','rainy','sunny','overcast','sunny')
#Temperature<-c('cool','cool','hot','mild','cool','cool','cool','hot','mild','mild')
#Humidity<-c('normal','normal','high','high','normal','normal','normal','normal','high','high')
#Wind<-c('FALSE','TRUE','FALSE','FALSE','FALSE','FALSE','FALSE','FALSE','TRUE','TRUE')
#play_decision<-cbind(play,outlook,Temperature,Humidity,Wind)
#play_decision
#play_decision=as.data.frame(play_decision)
#play_decision
#summary(play_decision)
p <- read.csv("C:/Users/jyothiramesh/Desktop/dsr/8836201-6f9306ad21398ea43cba4f7d537619d0e07d5ae3/DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
rpart.plot
install.packages("rpart.plot")
p <- read.csv("DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
rpart.plot
p <- read.csv("DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
#play<-c('yes','no','yes','no','yes','yes','yes','yes','yes','no')
#outlook<-c('rainy','rainy','overcast','sunny','rainy','sunny','rainy','sunny','overcast','sunny')
#Temperature<-c('cool','cool','hot','mild','cool','cool','cool','hot','mild','mild')
#Humidity<-c('normal','normal','high','high','normal','normal','normal','normal','high','high')
#Wind<-c('FALSE','TRUE','FALSE','FALSE','FALSE','FALSE','FALSE','FALSE','TRUE','TRUE')
#play_decision<-cbind(play,outlook,Temperature,Humidity,Wind)
#play_decision
#play_decision=as.data.frame(play_decision)
#play_decision
#summary(play_decision)
p <- read.csv("DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
#play<-c('yes','no','yes','no','yes','yes','yes','yes','yes','no')
#outlook<-c('rainy','rainy','overcast','sunny','rainy','sunny','rainy','sunny','overcast','sunny')
#Temperature<-c('cool','cool','hot','mild','cool','cool','cool','hot','mild','mild')
#Humidity<-c('normal','normal','high','high','normal','normal','normal','normal','high','high')
#Wind<-c('FALSE','TRUE','FALSE','FALSE','FALSE','FALSE','FALSE','FALSE','TRUE','TRUE')
#play_decision<-cbind(play,outlook,Temperature,Humidity,Wind)
#play_decision
#play_decision=as.data.frame(play_decision)
#play_decision
#summary(play_decision)
p <- read.csv("DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
?rpart.plot
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
#Loading dataset and constructing decision tree
df=read.csv("C:/Users/Shreyas Ramesh/Desktop/shreyas bmsce/data analysis/decision_data.csv")
summary(df)
dec_tree<-rpart(Play~Outlook + Temperature + Humidity + Wind, method="class", data=df, control=rpart.control(minsplit=1), parms=list(split='information'))
summary(dec_tree)
#Plotting decision tree
rpart.plot(dec_tree, type=4, extra=1)
#Predicting value of new test data
Outlook<-"sunny"
Temperature<-"mild"
Humidity<-"normal"
Wind<-FALSE
test<-data.frame(Outlook, Temperature, Humidity, Wind)
predict(dec_tree, test, type="class")
library(rpart)
library(rpart.plot)
#Loading dataset and constructing decision tree
df=read.csv("C:/Users/Shreyas Ramesh/Desktop/shreyas bmsce/data analysis/decision_data.csv")
summary(df)
dec_tree<-rpart(Play~Outlook + Temperature + Humidity + Wind, method="class", data=df, control=rpart.control(minsplit=1), parms=list(split='information'))
summary(dec_tree)
#Plotting decision tree
rpart.plot(dec_tree, type=4, extra=1)
#Predicting value of new test data
Outlook<-"sunny"
Temperature<-"mild"
Humidity<-"normal"
Wind<-FALSE
test<-data.frame(Outlook, Temperature, Humidity, Wind)
predict(dec_tree, test, type="class")
install.packages("rpart.plot")
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
p <- read.csv("DT.csv")
p2 <- data.frame(p)
p2
fit=rpart(play ~ outlook + Temperature  +Humidity +Wind,method="class",data=p2,control=rpart.control(minsplit=1),parms=list(split='information'))
fit
str(fit)
rpart.plot(fit,type=4,extra=1)
rpart.plot(fit,type=4,extra=2,clip.right.labs=FALSE,varlen=0,faclen=0)
Length<-c(20,21,22,23,21,20)
Speed<-c(12,14,12,16,20,21)
Algae<-c(40,45,45,80,75,65)
NO3<-c(2.25,2.15,1.75,1.95,1.95,2.75)
BOD<-c(200,180,135,120,110,120)
mf<-data.frame(Length,Speed,Algae,NO3,BOD)
mf
Opt=par(mfrow=c(2,2))
Opt
plot(Length~BOD,data=mf, main='plot1')
plot.new()
plot.new()
plot(Length ~ NO3,data=mf,main='plot4')
